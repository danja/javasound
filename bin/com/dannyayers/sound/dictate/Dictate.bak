/**
 *		Dictate,java
 */

import 	java.awt.*;
import 	java.awt.event.*;
import 	javax.swing.*;
import 	javax.swing.event.*;
import	javax.sound.sampled.*;
import	javax.sound.sampled.AudioFormat.*;

import 	AppWindow;
import 	Record; 
import 	Player; 

public class Dictate implements ActionListener
{
	static AppWindow window; 
	Record rec;
	Player play;

	static JProgressBar meterbar;
	static JButton recordButton;
	static JButton stopButton;
	static JButton playButton;

	static Encoding encoding = Encoding.PCM_SIGNED;
	static float samplerate = 11025.0F;
	static int resolution = 16;
	static int nchannels = 1;
	static int framesize = 2;
	static float framerate = 11025.0F;
	static boolean bigendian = false;
	static AudioFormat	format = new AudioFormat(encoding, samplerate, resolution, nchannels, framesize, framerate, bigendian);

	static float level;
	static int threshold = 10;
	static int buffersize = 16384; 

    public static void main(String[] args)
    {
		window = new AppWindow("Dictate", new Dimension(250,75));
		Dictate  dictate = new Dictate();
		window.setVisible(true);
	}

	public Dictate()
	{
		JPanel buttonpanel = new JPanel();

		recordButton = new JButton("Record");
		recordButton.addActionListener(this);
		buttonpanel.add(recordButton);

		stopButton = new JButton("Stop");
		stopButton.addActionListener(this);
		buttonpanel.add(stopButton);

		playButton = new JButton("Play");
		playButton.addActionListener(this);
		buttonpanel.add(playButton);

		Container content = window.getContentPane();
		content.setLayout(new BorderLayout());
		content.add(buttonpanel, BorderLayout.SOUTH);

		meterbar = new JProgressBar(0,128);
		meterbar.setBorderPainted(true);
		meterbar.setForeground(Color.green);
		content.add(meterbar, BorderLayout.CENTER);

		EnableButtons(true, false, false);
	}

	static void EnableButtons(boolean start, boolean stop, boolean play)
	{
			recordButton.setEnabled(start);
			stopButton.setEnabled(stop);
			playButton.setEnabled(play);
	}		

	public void actionPerformed(ActionEvent e)
	{
		String command = e.getActionCommand();

		if(command.equals("Record")&&!Record.recording&&!Player.playing)
		{
			rec = new Record();
			rec.startRec();
			(new LevelUpdate()).start();

			EnableButtons(false, true, false);	
		}

		if(command.equals("Stop")&&Record.recording)
		{
			rec.stopRec();
			EnableButtons(true, false, true);
		}

		if(command.equals("Play")&&!Record.recording&&!Player.playing)
		{
			level = 0;
			play = new Player();
			play.startPlay();
			(new LevelUpdate()).start();

			EnableButtons(true, false, true);
		}
	}

	class LevelUpdate extends Thread 
	{
		public void run() 
		{
			meterbar.setBackground(Color.black);
			meterbar.setValue(0);

			while(Record.recording||Player.playing)
			{
				meterbar.setValue((int)level);
				try
				{
				Thread.sleep(10);
				} 
				catch (InterruptedException ie)
				{
					System.out.println(ie);
				}
			}
			meterbar.setValue(0);
			meterbar.setBackground(SystemColor.control);
		}
	}
}